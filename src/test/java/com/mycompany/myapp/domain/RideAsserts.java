package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class RideAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideAllPropertiesEquals(Ride expected, Ride actual) {
        assertRideAutoGeneratedPropertiesEquals(expected, actual);
        assertRideAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideAllUpdatablePropertiesEquals(Ride expected, Ride actual) {
        assertRideUpdatableFieldsEquals(expected, actual);
        assertRideUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideAutoGeneratedPropertiesEquals(Ride expected, Ride actual) {
        assertThat(expected)
            .as("Verify Ride auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideUpdatableFieldsEquals(Ride expected, Ride actual) {
        assertThat(expected)
            .as("Verify Ride relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getScheduledTime())
                        .as("check scheduledTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getScheduledTime())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getPickupAddress()).as("check pickupAddress").isEqualTo(actual.getPickupAddress()))
            .satisfies(e -> assertThat(e.getDropoffAddress()).as("check dropoffAddress").isEqualTo(actual.getDropoffAddress()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideUpdatableRelationshipsEquals(Ride expected, Ride actual) {
        assertThat(expected)
            .as("Verify Ride relationships")
            .satisfies(e -> assertThat(e.getChild()).as("check child").isEqualTo(actual.getChild()))
            .satisfies(e -> assertThat(e.getDriver()).as("check driver").isEqualTo(actual.getDriver()));
    }
}
